#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
"""

import os
import sys
import subprocess
import time
import requests
from pathlib import Path

def check_file_exists(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if Path(file_path).exists():
        print(f"‚úÖ {file_path}")
        return True
    else:
        print(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_directory_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        "new_site/backend/app/main.py",
        "new_site/backend/requirements.txt",
        "new_site/backend/start_server.py",
        "new_site/frontend/package.json",
        "new_site/frontend/src/App.jsx",
        "new_site/admin/package.json",
        "new_site/admin/src/App.jsx",
        ".env.example",
        "README.md",
        ".gitignore"
    ]
    
    all_good = True
    for file_path in required_files:
        if not check_file_exists(file_path):
            all_good = False
    
    return all_good

def check_backend_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ backend"""
    print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        import fastapi
        print(f"‚úÖ FastAPI {fastapi.__version__}")
        
        import sqlalchemy
        print(f"‚úÖ SQLAlchemy {sqlalchemy.__version__}")
        
        import uvicorn
        print(f"‚úÖ Uvicorn {uvicorn.__version__}")
        
        return True
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: cd new_site/backend && pip install -r requirements.txt")
        return False

def test_backend_startup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ backend"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend...")
    
    try:
        # –ú–µ–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ backend
        os.chdir("new_site/backend")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        sys.path.insert(0, ".")
        from app.main import app
        
        print("‚úÖ Backend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.chdir("../..")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ backend: {e}")
        os.chdir("../..")
        return False

def check_frontend_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ frontend"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Frontend...")
    
    frontend_node_modules = Path("new_site/frontend/node_modules")
    admin_node_modules = Path("new_site/admin/node_modules")
    
    if frontend_node_modules.exists():
        print("‚úÖ Frontend node_modules –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("‚ùå Frontend node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: cd new_site/frontend && npm install")
        return False
    
    if admin_node_modules.exists():
        print("‚úÖ Admin node_modules –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("‚ùå Admin node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: cd new_site/admin && npm install")
        return False
    
    return True

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_example = Path(".env.example")
    env_file = Path("new_site/backend/.env")
    
    if env_example.exists():
        print("‚úÖ .env.example –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if env_file.exists():
        print("‚úÖ Backend .env –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ö†Ô∏è Backend .env –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 50)
    
    all_checks_passed = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if not check_directory_structure():
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python
    if not check_backend_dependencies():
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend
    if not test_backend_startup():
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js
    if not check_frontend_dependencies():
        all_checks_passed = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_env_file()
    
    print("\n" + "=" * 50)
    
    if all_checks_passed:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã:")
        print("   Backend:  cd new_site/backend && python start_server.py")
        print("   Frontend: cd new_site/frontend && npm run dev")
        print("   Admin:    cd new_site/admin && npm run dev")
        print("\n2. üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
        print("   –°–∞–π—Ç:     http://localhost:5173")
        print("   –ê–¥–º–∏–Ω–∫–∞:  http://localhost:5174")
        print("   API:      http://localhost:8000/docs")
        print("\n3. üîê –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É (admin/admin)")
        print("4. üé® –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∞–π—Ç –ø–æ–¥ —Å–µ–±—è")
        print("5. üöÄ –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ –Ω–∞ Vercel/Railway")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())