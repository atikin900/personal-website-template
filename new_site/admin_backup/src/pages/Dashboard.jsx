import { useState, useEffect } from 'react'
import axios from 'axios'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

const Dashboard = () => {
  const [stats, setStats] = useState({
    posts: 0,
    goals: 0,
    completedGoals: 0
  })
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchStats = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ API
        const [postsRes, goalsRes] = await Promise.all([
          axios.get('http://localhost:8000/api/posts'),
          axios.get('http://localhost:8000/api/goals')
        ])

        const totalGoals = goalsRes.data.reduce((acc, category) => acc + category.goals.length, 0)
        const completedGoals = goalsRes.data.reduce((acc, category) => 
          acc + category.goals.filter(goal => goal.is_completed).length, 0
        )

        setStats({
          posts: postsRes.data.length,
          goals: totalGoals,
          completedGoals
        })
      } catch (error) {
        console.error('Error fetching stats:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchStats()
  }, [])

  if (loading) {
    return <div className="text-white">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-white mb-2">–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Backup)</h1>
        <p className="text-gray-400">–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-gray-300">
              –ó–∞–ø–∏—Å–∏ –≤ –±–ª–æ–≥–µ
            </CardTitle>
            <span className="text-2xl">üìù</span>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">{stats.posts}</div>
            <p className="text-xs text-gray-400">
              –í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gray-800 border-gray-700">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-gray-300">
              –¶–µ–ª–∏
            </CardTitle>
            <span className="text-2xl">üéØ</span>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">{stats.goals}</div>
            <p className="text-xs text-gray-400">
              –í—Å–µ–≥–æ —Ü–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gray-800 border-gray-700">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-gray-300">
              –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–µ–ª–µ–π
            </CardTitle>
            <span className="text-2xl">‚úÖ</span>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">{stats.completedGoals}</div>
            <p className="text-xs text-gray-400">
              {stats.goals > 0 ? Math.round((stats.completedGoals / stats.goals) * 100) : 0}% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            </p>
          </CardContent>
        </Card>
      </div>

      <div className="bg-yellow-900/20 border border-yellow-600/30 rounded-lg p-4">
        <h3 className="text-yellow-400 font-semibold mb-2">‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è</h3>
        <p className="text-yellow-200 text-sm">
          –≠—Ç–æ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ README.md
        </p>
      </div>
    </div>
  )
}

export default Dashboard