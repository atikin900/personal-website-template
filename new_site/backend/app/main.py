from fastapi import FastAPI, Depends, HTTPException, status, Form, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
from datetime import timedelta
from typing import List

from .database import SessionLocal, engine, get_db
from .models import Base, SiteSettings, BlogPost, GoalCategory, Goal, User, SocialNetwork
from .schemas import (
    SiteSettings as SiteSettingsSchema,
    SiteSettingsCreate, SiteSettingsUpdate,
    BlogPost as BlogPostSchema, BlogPostCreate, BlogPostUpdate,
    GoalCategory as GoalCategorySchema, GoalCategoryCreate, GoalCategoryUpdate,
    Goal as GoalSchema, GoalCreate, GoalUpdate,
    User as UserSchema, UserCreate, Token,
    SocialNetwork as SocialNetworkSchema, SocialNetworkCreate, SocialNetworkUpdate
)
from .auth import (
    authenticate_user, create_access_token, get_current_user,
    get_password_hash, ACCESS_TOKEN_EXPIRE_MINUTES
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

app = FastAPI(title="Personal Site API", version="1.0.0")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:5174", "http://localhost:5175"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def init_data():
    import os
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        admin_username = os.getenv("ADMIN_USERNAME", os.getenv("DEFAULT_ADMIN_USERNAME", "admin"))
        admin_password = os.getenv("ADMIN_PASSWORD", os.getenv("DEFAULT_ADMIN_PASSWORD", "admin"))
        admin_email = os.getenv("DEFAULT_ADMIN_EMAIL", "admin@example.com")
        
        site_title = os.getenv("DEFAULT_SITE_TITLE", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç")
        user_name = os.getenv("DEFAULT_USER_NAME", "–í–∞—à–µ –ò–º—è")
        user_nickname = os.getenv("DEFAULT_USER_NICKNAME", "–í–∞—à –ù–∏–∫–Ω–µ–π–º")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin_user = db.query(User).filter(User.username == admin_username).first()
        if not admin_user:
            admin_user = User(
                username=admin_username,
                hashed_password=get_password_hash(admin_password)
            )
            db.add(admin_user)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {admin_username}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∞–π—Ç–∞
        site_settings = db.query(SiteSettings).first()
        if not site_settings:
            site_settings = SiteSettings(
                site_title=f"{user_name} | {site_title}",
                meta_description=f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞ {user_name}",
                hero_title=user_name,
                hero_subtitle=f"{user_nickname} | –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                display_name=user_name,  # –ü–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
                short_name=user_nickname,  # –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
                about_text=f"""<p><strong>–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {user_name}.</strong></p>

<p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –±–æ–ª—å—à–µ, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏.</p>

<p>–≠—Ç–æ—Ç —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: React.js –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ FastAPI –¥–ª—è backend. –í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ –ø–æ–¥ —Å–µ–±—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.</p>

<p><em>–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞.</em></p>""",
                github_url="https://github.com/yourusername",
                telegram_url="https://t.me/yourusername",
                email=admin_email,
                profile_image="/static/assets/images/profile.svg",
                primary_color="#3b82f6",
                secondary_color="#1e40af", 
                accent_color="#06b6d4",
                text_color="#ffffff",
                background_color="#0f172a"
            )
            db.add(site_settings)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞ –¥–ª—è: {user_name}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ü–µ–ª–µ–π
        categories = [
            {"name": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "order": 1},
            {"name": "–ó–¥–æ—Ä–æ–≤—å–µ/–°–ø–æ—Ä—Ç", "order": 2},
            {"name": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "order": 3},
            {"name": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "order": 4},
            {"name": "–î—Ä—É–≥–æ–µ", "order": 5}
        ]
        
        for cat_data in categories:
            existing_cat = db.query(GoalCategory).filter(GoalCategory.name == cat_data["name"]).first()
            if not existing_cat:
                category = GoalCategory(**cat_data)
                db.add(category)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        social_networks = [
            {
                "name": "GitHub",
                "url": "https://github.com/yourusername",
                "icon_name": "github",
                "show_in_footer": True,
                "show_in_header": False,
                "order": 1
            },
            {
                "name": "Telegram", 
                "url": "https://t.me/yourusername",
                "icon_name": "telegram",
                "show_in_footer": True,
                "show_in_header": False,
                "order": 2
            }
        ]
        
        for social_data in social_networks:
            existing = db.query(SocialNetwork).filter(SocialNetwork.name == social_data["name"]).first()
            if not existing:
                social = SocialNetwork(**social_data)
                db.add(social)
        
        db.commit()
        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_data()

# Auth endpoints
@app.post("/api/auth/login", response_model=Token)
async def login(username: str = Form(), password: str = Form(), db: Session = Depends(get_db)):
    user = authenticate_user(db, username, password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

# Public API endpoints
@app.get("/api/site", response_model=SiteSettingsSchema)
def get_site_settings(db: Session = Depends(get_db)):
    settings = db.query(SiteSettings).first()
    if not settings:
        raise HTTPException(status_code=404, detail="Site settings not found")
    return settings

@app.get("/api/posts", response_model=List[BlogPostSchema])
def get_published_posts(db: Session = Depends(get_db)):
    posts = db.query(BlogPost).filter(BlogPost.published == True).order_by(BlogPost.created_at.desc()).all()
    return posts

@app.get("/api/posts/{slug}", response_model=BlogPostSchema)
def get_post_by_slug(slug: str, db: Session = Depends(get_db)):
    post = db.query(BlogPost).filter(BlogPost.slug == slug, BlogPost.published == True).first()
    if not post:
        raise HTTPException(status_code=404, detail="Post not found")
    return post

@app.get("/api/goals")
def get_goals(db: Session = Depends(get_db)):
    categories = db.query(GoalCategory).order_by(GoalCategory.order).all()
    result = []
    
    for category in categories:
        goals = db.query(Goal).filter(Goal.category_id == category.id).order_by(Goal.order).all()
        completed_count = len([g for g in goals if g.is_completed])
        total_count = len(goals)
        
        result.append({
            "id": category.id,
            "name": category.name,
            "goals": [
                {
                    "id": goal.id,
                    "text": goal.text,
                    "is_completed": goal.is_completed,
                    "completed_date": goal.completed_date,
                    "order": goal.order
                }
                for goal in goals
            ],
            "stats": {
                "total": total_count,
                "completed": completed_count,
                "percentage": round((completed_count / total_count * 100) if total_count > 0 else 0, 1)
            }
        })
    
    return result

@app.get("/api/social-networks", response_model=List[SocialNetworkSchema])
def get_social_networks(db: Session = Depends(get_db)):
    networks = db.query(SocialNetwork).order_by(SocialNetwork.order).all()
    return networks

@app.get("/api/public/social-networks", response_model=List[SocialNetworkSchema])
def get_public_social_networks(db: Session = Depends(get_db)):
    networks = db.query(SocialNetwork).order_by(SocialNetwork.order).all()
    return networks

@app.get("/api/public/posts", response_model=List[BlogPostSchema])
def get_public_posts(db: Session = Depends(get_db)):
    posts = db.query(BlogPost).order_by(BlogPost.created_at.desc()).all()
    return posts

@app.get("/api/public/goals")
def get_public_goals(db: Session = Depends(get_db)):
    categories = db.query(GoalCategory).order_by(GoalCategory.order).all()
    result = []
    
    for category in categories:
        goals = db.query(Goal).filter(Goal.category_id == category.id).order_by(Goal.order).all()
        completed_count = len([g for g in goals if g.is_completed])
        total_count = len(goals)
        
        result.append({
            "id": category.id,
            "name": category.name,
            "goals": [
                {
                    "id": goal.id,
                    "text": goal.text,
                    "is_completed": goal.is_completed,
                    "completed_date": goal.completed_date,
                    "order": goal.order,
                    "created_at": goal.created_at
                }
                for goal in goals
            ],
            "stats": {
                "total": total_count,
                "completed": completed_count,
                "percentage": round((completed_count / total_count) * 100) if total_count > 0 else 0
            }
        })
    
    return result

# Admin API endpoints (protected)
@app.put("/api/admin/site", response_model=SiteSettingsSchema)
def update_site_settings(
    settings_update: SiteSettingsUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    settings = db.query(SiteSettings).first()
    if not settings:
        settings = SiteSettings()
        db.add(settings)
    
    for field, value in settings_update.dict(exclude_unset=True).items():
        setattr(settings, field, value)
    
    db.commit()
    db.refresh(settings)
    return settings

@app.get("/api/admin/posts", response_model=List[BlogPostSchema])
def get_all_posts(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    posts = db.query(BlogPost).order_by(BlogPost.created_at.desc()).all()
    return posts

@app.post("/api/admin/posts", response_model=BlogPostSchema)
def create_post(
    post: BlogPostCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    from datetime import datetime
    
    post_data = post.dict()
    
    # –ï—Å–ª–∏ –ø–æ—Å—Ç –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é
    if post_data.get('published') and not post_data.get('published_at'):
        post_data['published_at'] = datetime.now()
    
    db_post = BlogPost(**post_data)
    db.add(db_post)
    db.commit()
    db.refresh(db_post)
    return db_post

@app.put("/api/admin/posts/{post_id}", response_model=BlogPostSchema)
def update_post(
    post_id: int,
    post_update: BlogPostUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    from datetime import datetime
    
    post = db.query(BlogPost).filter(BlogPost.id == post_id).first()
    if not post:
        raise HTTPException(status_code=404, detail="Post not found")
    
    update_data = post_update.dict(exclude_unset=True)
    
    # –ï—Å–ª–∏ –ø–æ—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º –∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é
    if update_data.get('published') and not post.published and not update_data.get('published_at'):
        update_data['published_at'] = datetime.now()
    
    for field, value in update_data.items():
        setattr(post, field, value)
    
    db.commit()
    db.refresh(post)
    return post

@app.delete("/api/admin/posts/{post_id}")
def delete_post(
    post_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    post = db.query(BlogPost).filter(BlogPost.id == post_id).first()
    if not post:
        raise HTTPException(status_code=404, detail="Post not found")
    
    db.delete(post)
    db.commit()
    return {"message": "Post deleted successfully"}

@app.get("/api/admin/goals")
def get_all_goals(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return get_goals(db)

@app.post("/api/admin/goals", response_model=GoalSchema)
def create_goal(
    goal: GoalCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    db_goal = Goal(**goal.dict())
    db.add(db_goal)
    db.commit()
    db.refresh(db_goal)
    return db_goal

@app.put("/api/admin/goals/{goal_id}", response_model=GoalSchema)
def update_goal(
    goal_id: int,
    goal_update: GoalUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    goal = db.query(Goal).filter(Goal.id == goal_id).first()
    if not goal:
        raise HTTPException(status_code=404, detail="Goal not found")
    
    for field, value in goal_update.dict(exclude_unset=True).items():
        setattr(goal, field, value)
    
    db.commit()
    db.refresh(goal)
    return goal

@app.delete("/api/admin/goals/{goal_id}")
def delete_goal(
    goal_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    goal = db.query(Goal).filter(Goal.id == goal_id).first()
    if not goal:
        raise HTTPException(status_code=404, detail="Goal not found")
    
    db.delete(goal)
    db.commit()
    return {"message": "Goal deleted successfully"}

@app.get("/api/admin/categories", response_model=List[GoalCategorySchema])
def get_categories(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    categories = db.query(GoalCategory).order_by(GoalCategory.order).all()
    return categories

@app.post("/api/admin/categories", response_model=GoalCategorySchema)
def create_category(
    category: GoalCategoryCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    db_category = GoalCategory(**category.dict())
    db.add(db_category)
    db.commit()
    db.refresh(db_category)
    return db_category

# Temporary endpoint for creating users (remove in production)
@app.post("/api/create-user", response_model=UserSchema)
def create_user_temp(user: UserCreate, db: Session = Depends(get_db)):
    hashed_password = get_password_hash(user.password)
    db_user = User(username=user.username, hashed_password=hashed_password)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@app.post("/api/admin/upload-profile-image")
async def upload_profile_image(
    file: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    import os
    import shutil
    from pathlib import Path
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    allowed_types = ["image/jpeg", "image/jpg", "image/png", "image/gif", "image/webp"]
    if file.content_type not in allowed_types:
        raise HTTPException(
            status_code=400, 
            detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, GIF, WebP"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    max_size = 5 * 1024 * 1024  # 5MB
    file_content = await file.read()
    if len(file_content) > max_size:
        raise HTTPException(
            status_code=400,
            detail="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB"
        )
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    upload_dir = Path("static/assets/images")
    upload_dir.mkdir(parents=True, exist_ok=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_extension = file.filename.split('.')[-1].lower()
    new_filename = f"profile.{file_extension}"
    file_path = upload_dir / new_filename
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(file_path, "wb") as buffer:
        buffer.write(file_content)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    settings = db.query(SiteSettings).first()
    if not settings:
        settings = SiteSettings()
        db.add(settings)
    
    settings.profile_image = f"/static/assets/images/{new_filename}"
    db.commit()
    db.refresh(settings)
    
    return {
        "message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
        "profile_image": settings.profile_image
    }

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
@app.post("/api/admin/change-password")
async def change_password(
    current_password: str = Form(),
    new_password: str = Form(),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    from .auth import verify_password
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
    if not verify_password(current_password, current_user.hashed_password):
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    if len(new_password) < 4:
        raise HTTPException(
            status_code=400,
            detail="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    current_user.hashed_password = get_password_hash(new_password)
    db.commit()
    
    return {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/api/admin/change-username")
async def change_username(
    new_username: str = Form(),
    password: str = Form(),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    from .auth import verify_password
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if not verify_password(password, current_user.hashed_password):
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(new_username) < 3:
        raise HTTPException(
            status_code=400,
            detail="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_user = db.query(User).filter(User.username == new_username, User.id != current_user.id).first()
    if existing_user:
        raise HTTPException(
            status_code=400,
            detail="–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user.username = new_username
    db.commit()
    
    return {"message": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ"}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@app.get("/api/admin/user-info")
async def get_user_info(
    current_user: User = Depends(get_current_user)
):
    return {
        "username": current_user.username,
        "id": current_user.id
    }

# Social Networks CRUD
@app.get("/api/admin/social-networks", response_model=List[SocialNetworkSchema])
def get_admin_social_networks(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    networks = db.query(SocialNetwork).order_by(SocialNetwork.order).all()
    return networks

@app.post("/api/admin/social-networks", response_model=SocialNetworkSchema)
def create_social_network(
    network: SocialNetworkCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    db_network = SocialNetwork(**network.dict())
    db.add(db_network)
    db.commit()
    db.refresh(db_network)
    return db_network

@app.put("/api/admin/social-networks/{network_id}", response_model=SocialNetworkSchema)
def update_social_network(
    network_id: int,
    network: SocialNetworkUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    db_network = db.query(SocialNetwork).filter(SocialNetwork.id == network_id).first()
    if not db_network:
        raise HTTPException(status_code=404, detail="Social network not found")
    
    for field, value in network.dict(exclude_unset=True).items():
        setattr(db_network, field, value)
    
    db.commit()
    db.refresh(db_network)
    return db_network

@app.delete("/api/admin/social-networks/{network_id}")
def delete_social_network(
    network_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    db_network = db.query(SocialNetwork).filter(SocialNetwork.id == network_id).first()
    if not db_network:
        raise HTTPException(status_code=404, detail="Social network not found")
    
    db.delete(db_network)
    db.commit()
    return {"message": "Social network deleted successfully"}

# Endpoint –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
@app.post("/api/admin/seed-data")
def seed_demo_data(
    options: dict = None,
    db: Session = Depends(get_db)
):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        if options is None:
            options = {
                "siteSettings": True,
                "socialNetworks": True,
                "goalCategories": True,
                "goals": True,
                "blogPosts": True
            }

        created_items = []

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∞–π—Ç–∞
        if options.get("siteSettings", True):
            site_settings = db.query(SiteSettings).first()
            if not site_settings:
                site_settings = SiteSettings(
                    site_title="–ò–≤–∞–Ω—Ü–æ–≤ –ù–∏–∫–∏—Ç–∞ | –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç",
                    meta_description="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞ –ò–≤–∞–Ω—Ü–æ–≤–∞ –ù–∏–∫–∏—Ç—ã - —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
                    hero_title="–ò–≤–∞–Ω—Ü–æ–≤ –ù–∏–∫–∏—Ç–∞",
                    hero_subtitle="–°—Ç—É–¥–µ–Ω—Ç, –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                    about_text="""<p><strong>–ü—Ä–∏–≤–µ—Ç!</strong></p>
<p>–Ø –æ–±–ª–∞–¥–∞—é –≤—ã—Å–æ–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å—é –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ. –ú–æ–π –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω–æ–π —á–µ—Ä—Ç–æ–π —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä—É–¥–æ–ª—é–±–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.</p>
<p>–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —è —É—á—É—Å—å –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º –∫—É—Ä—Å–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª. –ú–æ–π –æ–ø—ã—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Python, 1–°, HTML –∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ –ú–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏.</p>
<p>–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è —Å –±–æ–ª—å—à–∏–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Å–≤–∞–∏–≤–∞—é Photoshop –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –≤–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂–∞.</p>""",
                    github_url="https://github.com/atikin900",
                    telegram_url="https://t.me/atikin90",
                    email="example@example.com",
                    profile_image="/static/assets/images/profile.svg",
                    primary_color="#3b82f6",
                    secondary_color="#1e40af", 
                    accent_color="#06b6d4",
                    text_color="#ffffff",
                    background_color="#0f172a"
                )
                db.add(site_settings)
                created_items.append("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        if options.get("socialNetworks", True):
            social_networks = [
            {
                "name": "GitHub",
                "url": "https://github.com/atikin900",
                "icon_name": "github",
                "show_in_footer": True,
                "show_in_header": False,
                "order": 1
            },
            {
                "name": "Telegram", 
                "url": "https://t.me/atikin90",
                "icon_name": "telegram",
                "show_in_footer": True,
                "show_in_header": False,
                "order": 2
            }
            ]
            
            for social_data in social_networks:
                existing = db.query(SocialNetwork).filter(SocialNetwork.name == social_data["name"]).first()
                if not existing:
                    social = SocialNetwork(**social_data)
                    db.add(social)
                    created_items.append(f"–°–æ—Ü—Å–µ—Ç—å: {social_data['name']}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ü–µ–ª–µ–π
        if options.get("goalCategories", True):
            categories_data = [
            {"name": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "order": 1},
            {"name": "–ö–∞—Ä—å–µ—Ä–∞", "order": 2},
            {"name": "–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", "order": 3}
            ]
            
            for cat_data in categories_data:
                existing = db.query(GoalCategory).filter(GoalCategory.name == cat_data["name"]).first()
                if not existing:
                    category = GoalCategory(**cat_data)
                    db.add(category)
                    created_items.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–µ–ª–µ–π: {cat_data['name']}")
        
        db.commit()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–π
        if options.get("goals", True):
            education_cat = db.query(GoalCategory).filter(GoalCategory.name == "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ").first()
            career_cat = db.query(GoalCategory).filter(GoalCategory.name == "–ö–∞—Ä—å–µ—Ä–∞").first()
            personal_cat = db.query(GoalCategory).filter(GoalCategory.name == "–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ").first()
            
            goals_data = [
            {
                "text": "–ò–∑—É—á–∏—Ç—å React.js –∏ —Å–æ–∑–¥–∞—Ç—å 3 –ø—Ä–æ–µ–∫—Ç–∞",
                "category_id": education_cat.id if education_cat else 1,
                "is_completed": True,
                "completed_date": "2024-10-15",
                "order": 1
            },
            {
                "text": "–û—Å–≤–æ–∏—Ç—å FastAPI –¥–ª—è backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                "category_id": education_cat.id if education_cat else 1,
                "is_completed": True,
                "completed_date": "2024-10-20",
                "order": 2
            },
            {
                "text": "–ü–æ–ª—É—á–∏—Ç—å –¥–∏–ø–ª–æ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                "category_id": education_cat.id if education_cat else 1,
                "is_completed": False,
                "order": 3
            },
            {
                "text": "–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º",
                "category_id": career_cat.id if career_cat else 2,
                "is_completed": False,
                "order": 1
            },
            {
                "text": "–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–∑ 5 –ø—Ä–æ–µ–∫—Ç–æ–≤",
                "category_id": career_cat.id if career_cat else 2,
                "is_completed": False,
                "order": 2
            },
            {
                "text": "–ò–∑—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–æ —É—Ä–æ–≤–Ω—è B2",
                "category_id": personal_cat.id if personal_cat else 3,
                "is_completed": False,
                "order": 1
            }
            ]
            
            for goal_data in goals_data:
                existing = db.query(Goal).filter(Goal.text == goal_data["text"]).first()
                if not existing:
                    goal = Goal(**goal_data)
                    db.add(goal)
                    created_items.append(f"–¶–µ–ª—å: {goal_data['text'][:30]}...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –ø–æ—Å—Ç–æ–≤ –±–ª–æ–≥–∞
        if options.get("blogPosts", True):
            posts_data = [
            {
                "title": "–ú–æ–π –ø—É—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "slug": "my-programming-journey",
                "excerpt": "–ò—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ —è –Ω–∞—á–∞–ª –∏–∑—É—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—Å–≤–æ–∏–ª",
                "content": """<h2>–ù–∞—á–∞–ª–æ –ø—É—Ç–∏</h2>
<p>–í—Å—ë –Ω–∞—á–∞–ª–æ—Å—å —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–æ–º—É, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ —Å–∞–π—Ç—ã. –ü–µ—Ä–≤—ã–º —è–∑—ã–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —è –∏–∑—É—á–∏–ª, –±—ã–ª Python.</p>

<h2>–ò–∑—É—á–µ–Ω–∏–µ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</h2>
<p>–ü–æ—Å–ª–µ –æ—Å–≤–æ–µ–Ω–∏—è –æ—Å–Ω–æ–≤ Python —è –ø–µ—Ä–µ—à–µ–ª –∫ –∏–∑—É—á–µ–Ω–∏—é –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: HTML, CSS, JavaScript. –≠—Ç–æ –æ—Ç–∫—Ä—ã–ª–æ –¥–ª—è –º–µ–Ω—è –º–∏—Ä —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.</p>

<h2>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h2>
<p>–°–µ–π—á–∞—Å —è –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—é React.js –∏ FastAPI, —Å–æ–∑–¥–∞—é –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.</p>""",
                "published": True
            },
            {
                "title": "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞",
                "slug": "creating-personal-website", 
                "excerpt": "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React –∏ FastAPI",
                "content": """<h2>–í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</h2>
<p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ —è –≤—ã–±—Ä–∞–ª —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–µ–∫: React.js –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ FastAPI –¥–ª—è backend API.</p>

<h2>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞</h2>
<p>–ü—Ä–æ–µ–∫—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π: —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ React, –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ API –Ω–∞ FastAPI. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.</p>

<h2>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</h2>
<p>–°–∞–π—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –±–ª–æ–≥, —Å–∏—Å—Ç–µ–º—É —Ü–µ–ª–µ–π –∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.</p>""",
                "published": True
            }
            ]
            
            for post_data in posts_data:
                existing = db.query(BlogPost).filter(BlogPost.slug == post_data["slug"]).first()
                if not existing:
                    post = BlogPost(**post_data)
                    db.add(post)
                    created_items.append(f"–ü–æ—Å—Ç –±–ª–æ–≥–∞: {post_data['title']}")
        
        db.commit()
        return {
            "message": "–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!",
            "created_items": created_items
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)