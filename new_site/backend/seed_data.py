#!/usr/bin/env python3

import sys
import os
import requests
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import SessionLocal
from app.models import SiteSettings, BlogPost, GoalCategory, Goal, User, SocialNetwork
from app.auth import get_password_hash

def seed_database():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    db = SessionLocal()
    
    try:
        print("üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin_user = db.query(User).filter(User.username == "admin").first()
        if not admin_user:
            admin_user = User(
                username="admin",
                hashed_password=get_password_hash("admin")
            )
            db.add(admin_user)
            print("‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (admin/admin)")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∞–π—Ç–∞
        site_settings = db.query(SiteSettings).first()
        if not site_settings:
            site_settings = SiteSettings(
                site_title="–ò–≤–∞–Ω—Ü–æ–≤ –ù–∏–∫–∏—Ç–∞ | –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç",
                meta_description="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞ –ò–≤–∞–Ω—Ü–æ–≤–∞ –ù–∏–∫–∏—Ç—ã - —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
                hero_title="–ò–≤–∞–Ω—Ü–æ–≤ –ù–∏–∫–∏—Ç–∞",
                hero_subtitle="–°—Ç—É–¥–µ–Ω—Ç, –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                about_text="""<p><strong>–ü—Ä–∏–≤–µ—Ç!</strong></p>
<p>–Ø –æ–±–ª–∞–¥–∞—é –≤—ã—Å–æ–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å—é –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ. –ú–æ–π –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω–æ–π —á–µ—Ä—Ç–æ–π —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä—É–¥–æ–ª—é–±–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.</p>
<p>–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —è —É—á—É—Å—å –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º –∫—É—Ä—Å–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª. –ú–æ–π –æ–ø—ã—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Python, 1–°, HTML –∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ –ú–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏.</p>
<p>–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è —Å –±–æ–ª—å—à–∏–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Å–≤–∞–∏–≤–∞—é Photoshop –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –≤–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂–∞.</p>""",
                github_url="https://github.com/atikin900",
                telegram_url="https://t.me/atikin90",
                email="example@example.com",
                profile_image="/static/assets/images/profile.svg",
                primary_color="#3b82f6",
                secondary_color="#1e40af", 
                accent_color="#06b6d4",
                text_color="#ffffff",
                background_color="#0f172a"
            )
            db.add(site_settings)
            print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞")
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        social_networks = [
            {
                "name": "GitHub",
                "url": "https://github.com/atikin900",
                "icon_name": "github",
                "show_in_footer": True,
                "show_in_header": False,
                "order": 1
            },
            {
                "name": "Telegram", 
                "url": "https://t.me/atikin90",
                "icon_name": "telegram",
                "show_in_footer": True,
                "show_in_header": False,
                "order": 2
            }
        ]
        
        for social_data in social_networks:
            existing = db.query(SocialNetwork).filter(SocialNetwork.name == social_data["name"]).first()
            if not existing:
                social = SocialNetwork(**social_data)
                db.add(social)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–æ—Ü—Å–µ—Ç—å: {social_data['name']}")
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ü–µ–ª–µ–π
        categories_data = [
            {"name": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "order": 1},
            {"name": "–ö–∞—Ä—å–µ—Ä–∞", "order": 2},
            {"name": "–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ", "order": 3}
        ]
        
        for cat_data in categories_data:
            existing = db.query(GoalCategory).filter(GoalCategory.name == cat_data["name"]).first()
            if not existing:
                category = GoalCategory(**cat_data)
                db.add(category)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–µ–ª–µ–π: {cat_data['name']}")
        
        db.commit()
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–π
        education_cat = db.query(GoalCategory).filter(GoalCategory.name == "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ").first()
        career_cat = db.query(GoalCategory).filter(GoalCategory.name == "–ö–∞—Ä—å–µ—Ä–∞").first()
        personal_cat = db.query(GoalCategory).filter(GoalCategory.name == "–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ").first()
        
        goals_data = [
            {
                "text": "–ò–∑—É—á–∏—Ç—å React.js –∏ —Å–æ–∑–¥–∞—Ç—å 3 –ø—Ä–æ–µ–∫—Ç–∞",
                "category_id": education_cat.id if education_cat else 1,
                "is_completed": True,
                "completed_date": "2024-10-15",
                "order": 1
            },
            {
                "text": "–û—Å–≤–æ–∏—Ç—å FastAPI –¥–ª—è backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                "category_id": education_cat.id if education_cat else 1,
                "is_completed": True,
                "completed_date": "2024-10-20",
                "order": 2
            },
            {
                "text": "–ü–æ–ª—É—á–∏—Ç—å –¥–∏–ø–ª–æ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                "category_id": education_cat.id if education_cat else 1,
                "is_completed": False,
                "order": 3
            },
            {
                "text": "–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º",
                "category_id": career_cat.id if career_cat else 2,
                "is_completed": False,
                "order": 1
            },
            {
                "text": "–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–∑ 5 –ø—Ä–æ–µ–∫—Ç–æ–≤",
                "category_id": career_cat.id if career_cat else 2,
                "is_completed": False,
                "order": 2
            },
            {
                "text": "–ò–∑—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–æ —É—Ä–æ–≤–Ω—è B2",
                "category_id": personal_cat.id if personal_cat else 3,
                "is_completed": False,
                "order": 1
            }
        ]
        
        for goal_data in goals_data:
            existing = db.query(Goal).filter(Goal.text == goal_data["text"]).first()
            if not existing:
                goal = Goal(**goal_data)
                db.add(goal)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ü–µ–ª—å: {goal_data['text'][:50]}...")
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –ø–æ—Å—Ç–æ–≤ –±–ª–æ–≥–∞
        posts_data = [
            {
                "title": "–ú–æ–π –ø—É—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "slug": "my-programming-journey",
                "excerpt": "–ò—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ —è –Ω–∞—á–∞–ª –∏–∑—É—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—Å–≤–æ–∏–ª",
                "content": """<h2>–ù–∞—á–∞–ª–æ –ø—É—Ç–∏</h2>
<p>–í—Å—ë –Ω–∞—á–∞–ª–æ—Å—å —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–æ–º—É, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ —Å–∞–π—Ç—ã. –ü–µ—Ä–≤—ã–º —è–∑—ã–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —è –∏–∑—É—á–∏–ª, –±—ã–ª Python.</p>

<h2>–ò–∑—É—á–µ–Ω–∏–µ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</h2>
<p>–ü–æ—Å–ª–µ –æ—Å–≤–æ–µ–Ω–∏—è –æ—Å–Ω–æ–≤ Python —è –ø–µ—Ä–µ—à–µ–ª –∫ –∏–∑—É—á–µ–Ω–∏—é –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: HTML, CSS, JavaScript. –≠—Ç–æ –æ—Ç–∫—Ä—ã–ª–æ –¥–ª—è –º–µ–Ω—è –º–∏—Ä —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.</p>

<h2>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h2>
<p>–°–µ–π—á–∞—Å —è –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—é React.js –∏ FastAPI, —Å–æ–∑–¥–∞—é –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.</p>""",
                "published": True
            },
            {
                "title": "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞",
                "slug": "creating-personal-website", 
                "excerpt": "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React –∏ FastAPI",
                "content": """<h2>–í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</h2>
<p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ —è –≤—ã–±—Ä–∞–ª —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–µ–∫: React.js –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ FastAPI –¥–ª—è backend API.</p>

<h2>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞</h2>
<p>–ü—Ä–æ–µ–∫—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π: —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ React, –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ API –Ω–∞ FastAPI. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.</p>

<h2>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</h2>
<p>–°–∞–π—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –±–ª–æ–≥, —Å–∏—Å—Ç–µ–º—É —Ü–µ–ª–µ–π –∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.</p>""",
                "published": True
            }
        ]
        
        for post_data in posts_data:
            existing = db.query(BlogPost).filter(BlogPost.slug == post_data["slug"]).first()
            if not existing:
                post = BlogPost(**post_data)
                db.add(post)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç: {post_data['title']}")
        
        db.commit()
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    seed_database()